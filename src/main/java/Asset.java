/**
 * Parent for all asset types. Contains and manages attributes that 
 * all Farm Assets share. Also has some creation methods.
 */
package main.java;

import java.util.Random;

import exceptions.AssetAlreadyDeadException;

public abstract class Asset {
    
    public enum AssetKind {STEER, CHICKEN, SHEEP, DAIRYCOW, CORN, SOY}
    
    //How many acres does it take up
    private double landNeeded;
    //how much revenue produced in its cycle
    private int profit;
    //cost to purchase asset
    private int cost;
    //Strategy DP - how this asset gets harvested
    private HarvestStrategy harvestStrategy;
    //disease death rate
    private double diseaseDeathRate;
    //state context for this asset
    private final AssetStateContext sc = new AssetStateContext();
    
    Random rand = new Random();
    
    
    public Asset(int c, int p, double l, double deathRate) {
        landNeeded = l;
        cost = c;
        profit = p;
        diseaseDeathRate = deathRate;
    }
    
    /**
     * Use this method to return a random asset type
     * @return
     */
    public static Asset createRandomAsset() {
        return new DairyCow();
    }
    
    /**
     * Pass an integer to this method to create a Farm Asset ->
     * 1:Steer 2:Chicken 3:Sheep 4:DairyCow 5:Corn 6:Soy
     * @param num
     * @return
     */
    public static Asset createAsset(int num) {
        return new DairyCow();
    }
    
    
    /**
     *  Sets the amount of land this animal occupies
     * @param land needed as a double
     */
    protected void setLandNeeded(double land) {
        landNeeded = land;
    }
    
    /**
     * Sets how much that kind of animal costs
     * @param cost
     */
    protected void setCost(int cost) {
        this.cost = cost;
    }
    
    /**
     * Sets the profit of this animal
     * @param profit generated by this animal
     */
    protected void setProfit(int profit) {
        this.profit = profit;
    }
    /**
     * Gets the land needed
     * @return double the amount of land this animal occupies
     */
    public double getLandNeeded() {
        return landNeeded;
    }
    
    /**
     * Returns the cost to purchase this animal
     * @return
     */
    public int getCost() {
        return cost;
    }
    
    /**
     * Returns the profit this asset produces
     * @return
     */
    public int getProfit() {
        return profit;
    }
    
    /**
     * Sets the HarvestStrategy for this Asset
     * @param hs
     */
    public void setHarvestStrategy(HarvestStrategy hs) {
        this.harvestStrategy = hs;
    }
    
    /**
     * Calls harvest() from the appropriate HarvestStrategy object 
     */
    public void harvest() {
        harvestStrategy.harvest(this);
    }
    
    /**
     * TODO: May not need this.... 
     * @return a state context to be utilized by control class
     */
    public AssetStateContext getStateContext() {
        return sc;
    }
    
    public boolean isAlive() {
        return sc.isAlive();
    }
    
    public boolean isDiseased() {
        return sc.isDiseased();
    }
    
    /**
     * Set state of asset to diseased
     * @throws AssetAlreadyDeadException Asset is already dead. You cannot change state
     */
    public void setDiseased() throws AssetAlreadyDeadException {
        sc.setState(new StateDiseased());
    }
    
    /**
     * Set state of the asset to dead
     * @throws AssetAlreadyDeadException Asset is already dead. You cannot change state
     */
    public void setDead() throws AssetAlreadyDeadException{
        sc.setState(new StateDead());
    }
    
    /**
     * Sets the state of the asset to alive
     * @throws AssetAlreadyDeadException Asset is already dead. You cannot change state
     */
    public void setAlive() throws AssetAlreadyDeadException {
        if(sc.isDiseased()) {
            throw new AssetAlreadyDeadException();
        }
        sc.setState(new StateAlive());
    }
    
    public void setAliveReorder() {
        sc.setState(new StateAlive());
    }
    
}
